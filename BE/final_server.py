#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FULL Smart Home Flask server (multi MQTT broker, ho√†n ch·ªânh)
"""

import os
import traceback
import logging
import threading
import time
import requests
from flask import Flask, request, jsonify
from deepface import DeepFace
import joblib
import paho.mqtt.client as mqtt
import ssl
import wikipedia
import feedparser
import re
from datetime import datetime, timedelta
import pytz
from sympy import sympify
import dateparser
import cv2
import numpy as np
import mediapipe as mp

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
wikipedia.set_lang("vi")

app = Flask(__name__)

# === Firebase config ===
FIREBASE_DB_URL = "https://iot-frontend-web-default-rtdb.firebaseio.com"
POLL_INTERVAL   = 5  # gi√¢y

# === Telegram config ===
TELEGRAM_TOKEN = "7695652236:AAG35BaannGuCSzrqLGjMp6Nt6EBgBI5g3g"
TELEGRAM_CHAT_ID = "5788605495"

# Global device state
light1State = False
light2State = False
doorState   = False
fanState    = False

# ========== MQTT topic mapping ==========
WEMOS1_TOPIC = "home/cuaquat"  # C·ª≠a, qu·∫°t
WEMOS2_TOPIC = "home/den"      # ƒê√®n, c·∫£m bi·∫øn, ch√°y

# ======= MQTT MULTI-CLIENT CONFIG =======
# Broker 1: c·ª≠a, qu·∫°t
mqtt_broker1 = "3663b8f8294b4aa8acb3475e026adf3b.s1.eu.hivemq.cloud"
mqtt_port1   = 8883
mqtt_user1   = "iot_home"
mqtt_pass1   = "Tngan1724"

# Broker 2: ƒë√®n
mqtt_broker2 = "2571594adf7e48da9ee3958d605824ec.s1.eu.hivemq.cloud"
mqtt_port2   = 8883
mqtt_user2   = "haichu"
mqtt_pass2   = "H@ichu321"

mqtt_client1 = mqtt.Client()
mqtt_client1.username_pw_set(mqtt_user1, mqtt_pass1)
mqtt_client1.tls_set(cert_reqs=ssl.CERT_REQUIRED)
mqtt_client1.connect(mqtt_broker1, mqtt_port1)
mqtt_client1.loop_start()

mqtt_client2 = mqtt.Client()
mqtt_client2.username_pw_set(mqtt_user2, mqtt_pass2)
mqtt_client2.tls_set(cert_reqs=ssl.CERT_REQUIRED)
mqtt_client2.connect(mqtt_broker2, mqtt_port2)
mqtt_client2.loop_start()

def get_mqtt_client_for_command(cmd):
    if cmd in ["Mo_cua", "Dong_cua", "Bat_quat", "Tat_quat"]:
        return mqtt_client1, WEMOS1_TOPIC
    else:
        return mqtt_client2, WEMOS2_TOPIC

def fetch_firebase_state(key: str):
    try:
        r = requests.get(f"{FIREBASE_DB_URL}/{key}.json", timeout=5)
        if r.ok:
            return r.json()
    except Exception as e:
        logging.error(f"Firebase fetch {key} error: {e}")
    return None

def update_firebase_state(key: str, value):
    try:
        r = requests.put(f"{FIREBASE_DB_URL}/{key}.json", json=value, timeout=5)
        if not r.ok:
            logging.error(f"Failed to update Firebase {key}: {r.text}")
    except Exception as e:
        logging.error(f"Firebase update {key} error: {e}")

state_to_mcmd = {
    'doorState':   ('Mo_cua',    'Dong_cua'),
    'light1State': ('Bat_den_pk','Tat_den_pk'),
    'light2State': ('Bat_den_nb','Tat_den_nb'),
    'fanState':    ('Bat_quat',  'Tat_quat'),
}

def firebase_listener():
    global light1State, light2State, doorState, fanState
    prev = {}
    keys = ['light1State','light2State','doorState','fanState']
    for k in keys:
        v = fetch_firebase_state(k)
        if v is None: v = False
        prev[k] = v
        if k == 'light1State':   light1State = v
        if k == 'light2State':   light2State = v
        if k == 'doorState':     doorState   = v
        if k == 'fanState':      fanState    = v
        logging.info(f"Initial {k}: {v}")
    while True:
        for k in keys:
            v = fetch_firebase_state(k)
            if v is None: v = False
            if v != prev[k]:
                logging.info(f"{k} changed: {prev[k]} -> {v}")
                prev[k] = v
                if k == 'light1State': light1State = v
                if k == 'light2State': light2State = v
                if k == 'doorState':   doorState   = v
                if k == 'fanState':    fanState    = v
                if k in state_to_mcmd:
                    mtrue, mfalse = state_to_mcmd[k]
                    cmd = mtrue if v else mfalse
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    logging.info(f"Auto-published ‚Üí {topic} ({client._client_id.decode()}): {cmd}")
        time.sleep(POLL_INTERVAL)

threading.Thread(target=firebase_listener, daemon=True).start()

# === Face Recognition ===
DB_PATH    = "database"
MODEL_NAME = "Facenet512"

AUTHEN_TIMEOUT = 12
_authenticated = {"person": None, "last_frame": 0}

def set_authenticated(person):
    _authenticated["person"] = person
    _authenticated["last_frame"] = time.time()

def clear_authenticated():
    _authenticated["person"] = None
    _authenticated["last_frame"] = 0

def get_authenticated():
    if _authenticated["person"]:
        return _authenticated["person"]
    return None

@app.route('/recognize', methods=['POST'])
def recognize():
    try:
        if 'file' not in request.files:
            return jsonify({"error":"No file provided"}), 400
        f = request.files['file']
        tmp = "input.jpg"
        f.save(tmp)
        df = DeepFace.find(img_path=tmp, db_path=DB_PATH,
                           model_name=MODEL_NAME, enforce_detection=True)
        os.remove(tmp)
        if df and not df[0].empty:
            ident = df[0].iloc[0]["identity"]
            name = os.path.basename(os.path.dirname(ident))
            set_authenticated(name)
            return jsonify({"person": name}), 200
        else:
            return jsonify({"person":"Unknown"}), 200
    except Exception as e:
        traceback.print_exc()
        return jsonify({"error":str(e)}), 500

# ======== MQTT c·∫£m bi·∫øn, l∆∞u Firebase, g·ª≠i Telegram ========
def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        requests.post(url, data=data)
    except Exception as e:
        print(f"Telegram error: {e}")

def round_time_to_nearest_slot(dt):
    minute = dt.minute
    if minute < 15:
        new_minute = 0
    elif minute < 45:
        new_minute = 30
    else:
        dt = dt + timedelta(hours=1)
        new_minute = 0
    return dt.replace(minute=new_minute, second=0, microsecond=0)

def find_next_available_slot(values_dict, dt):
    for _ in range(48):
        label = dt.strftime("%H:%M")
        if not values_dict or label not in values_dict:
            return label
        dt += timedelta(minutes=30)
    return dt.strftime("%H:%M")

def on_mqtt_message(client, userdata, msg):
    payload = msg.payload.decode()
    logging.info(f"[MQTT RECEIVED] topic={msg.topic}: {payload}")
    now = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh'))
    time_slot = round_time_to_nearest_slot(now)
    label = time_slot.strftime("%H:%M")
    if payload.startswith("data_"):
        try:
            data = payload.replace("data_", "")
            temp_str, humi_str = data.split("/")
            temp = float(temp_str)
            humi = float(humi_str)
            requests.put(f"{FIREBASE_DB_URL}/temperature/{label}.json", json=int(temp))
            requests.put(f"{FIREBASE_DB_URL}/humidity/{label}.json", json=int(humi))
            logging.info(f"ƒê√£ l∆∞u {temp}¬∞C {humi}% v√†o {label}")
        except Exception as e:
            logging.error(f"L·ªói x·ª≠ l√Ω data_: {e}")
    elif payload == "Chay":
        send_telegram_alert("üî• C·∫¢NH B√ÅO CH√ÅY! H·ªá th·ªëng ph√°t hi·ªán ch√°y l√∫c " + now.strftime("%H:%M:%S %d/%m/%Y"))

mqtt_client1.on_message = on_mqtt_message
mqtt_client2.on_message = on_mqtt_message
mqtt_client1.subscribe(WEMOS1_TOPIC)
mqtt_client2.subscribe(WEMOS2_TOPIC)

# === NLP model load ===
clf        = joblib.load('intent_model.pkl')
vectorizer = joblib.load('vectorizer.pkl')

# === HAND GESTURE FSM ===
FSM = {
    "command_mode": False,
    "voice_mode": False,
    "gesture_counter": {
        "Fist": 0, "One": 0, "Two": 0, "Three": 0, "Four": 0, "Five": 0
    },
    "idle_frame": 0,
}
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=True, max_num_hands=1, min_detection_confidence=0.7)

@app.route('/hand', methods=['POST'])
def detect_hand():
    global FSM, doorState, light1State, light2State, fanState
    person = get_authenticated()
    if not person:
        FSM["command_mode"] = False
        FSM["voice_mode"] = False
        for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
        FSM["idle_frame"] = 0
    else:
        set_authenticated(person)
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        f = request.files['file']
        img_np = np.frombuffer(f.read(), np.uint8)
        img = cv2.imdecode(img_np, cv2.IMREAD_COLOR)
        if img is None:
            return jsonify({"error":"Image decode error"}), 400
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = hands.process(img_rgb)
        if not results.multi_hand_landmarks:
            for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
            if FSM["command_mode"]:
                FSM["idle_frame"] += 1
                if FSM["idle_frame"] >= 10:
                    FSM["command_mode"] = False
                    FSM["idle_frame"] = 0
                    return jsonify({"gesture": "", "command": "Tho√°t ch·∫ø ƒë·ªô c·ª≠ ch·ªâ do kh√¥ng c√≥ thao t√°c", "command_mode": False, "voice_mode": FSM["voice_mode"]})
                else:
                    return jsonify({"gesture": "", "command": "", "command_mode": True, "voice_mode": FSM["voice_mode"]})
            else:
                return jsonify({"gesture": "", "command": "", "command_mode": False, "voice_mode": FSM["voice_mode"]})
        FSM["idle_frame"] = 0
        lm = results.multi_hand_landmarks[0]
        tips = [lm.landmark[i] for i in (
            mp_hands.HandLandmark.THUMB_TIP,
            mp_hands.HandLandmark.INDEX_FINGER_TIP,
            mp_hands.HandLandmark.MIDDLE_FINGER_TIP,
            mp_hands.HandLandmark.RING_FINGER_TIP,
            mp_hands.HandLandmark.PINKY_TIP)]
        pips = [lm.landmark[i] for i in (
            mp_hands.HandLandmark.THUMB_IP,
            mp_hands.HandLandmark.INDEX_FINGER_PIP,
            mp_hands.HandLandmark.MIDDLE_FINGER_PIP,
            mp_hands.HandLandmark.RING_FINGER_PIP,
            mp_hands.HandLandmark.PINKY_PIP)]
        count = (1 if tips[0].x < pips[0].x else 0) + \
                sum(1 for i in range(1,5) if tips[i].y < pips[i].y)
        gesture = {0:"Fist", 1:"One", 2:"Two", 3:"Three", 4:"Four", 5:"Five"}.get(count, "Unknown")
        for k in FSM["gesture_counter"]:
            if k == gesture:
                FSM["gesture_counter"][k] += 1
            else:
                FSM["gesture_counter"][k] = 0
                
        logging.info(f"Gesture detected: {gesture}, counters: {FSM['gesture_counter']}")

        command = ""
        # ƒêƒÉng xu·∫•t gesture
        if person:
            if FSM["voice_mode"] and FSM["gesture_counter"]["Four"] >= 2:
                clear_authenticated()
                FSM["voice_mode"] = False
                FSM["command_mode"] = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Four", "command": "ƒê√£ ƒëƒÉng xu·∫•t (voice mode)", "command_mode": False, "voice_mode": False})
            if not FSM["voice_mode"] and not FSM["command_mode"] and FSM["gesture_counter"]["Four"] >= 2:
                clear_authenticated()
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Four", "command": "ƒê√£ ƒëƒÉng xu·∫•t (normal mode)", "command_mode": False, "voice_mode": False})
        if person and not FSM["command_mode"] and not FSM["voice_mode"]:
            if FSM["gesture_counter"]["Fist"] >= 2:
                FSM["command_mode"] = True
                FSM["voice_mode"] = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Fist", "command": "V√†o ch·∫ø ƒë·ªô c·ª≠ ch·ªâ", "command_mode": True, "voice_mode": False})
            if FSM["gesture_counter"]["Five"] >=2:
                FSM["voice_mode"] = True
                FSM["command_mode"] = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Two", "command": "V√†o ch·∫ø ƒë·ªô voice", "command_mode": False, "voice_mode": True})
        if person and FSM["voice_mode"]:
            if FSM["gesture_counter"]["Five"] >= 2:
                FSM["voice_mode"] = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Two", "command": "Tho√°t ch·∫ø ƒë·ªô voice", "command_mode": False, "voice_mode": False})
            return jsonify({"gesture": gesture, "command": "", "command_mode": False, "voice_mode": True})
        if person and FSM["command_mode"]:
            if FSM["gesture_counter"]["Five"] >= 2:
                FSM["command_mode"] = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Five", "command": "Tho√°t ch·∫ø ƒë·ªô c·ª≠ ch·ªâ", "command_mode": False, "voice_mode": False})
            # One: C·ª≠a, Two: ƒë√®n pk, Three: ƒë√®n nb, Four: qu·∫°t
            if FSM["gesture_counter"]["One"] >= 2:
                if not doorState:
                    command = "Open door"
                    cmd = "Mo_cua"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("doorState", True)
                    doorState = True
                else:
                    command = "Close door"
                    cmd = "Dong_cua"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("doorState", False)
                    doorState = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "One", "command": command, "command_mode": True, "voice_mode": False})
            if FSM["gesture_counter"]["Two"] >= 2:
                if not light1State:
                    command = "Turn on living room light"
                    cmd = "Bat_den_pk"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("light1State", True)
                    light1State = True
                else:
                    command = "Turn off living room light"
                    cmd = "Tat_den_pk"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("light1State", False)
                    light1State = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Two", "command": command, "command_mode": True, "voice_mode": False})
            if FSM["gesture_counter"]["Three"] >= 2:
                if not light2State:
                    command = "Turn on kitchen light"
                    cmd = "Bat_den_nb"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("light2State", True)
                    light2State = True
                else:
                    command = "Turn off kitchen light"
                    cmd = "Tat_den_nb"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("light2State", False)
                    light2State = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Three", "command": command, "command_mode": True, "voice_mode": False})
            if FSM["gesture_counter"]["Four"] >= 2:
                if not fanState:
                    command = "Turn on fan"
                    cmd = "Bat_quat"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("fanState", True)
                    fanState = True
                else:
                    command = "Turn off fan"
                    cmd = "Tat_quat"
                    client, topic = get_mqtt_client_for_command(cmd)
                    for i in range(2):
                        client.publish(topic, cmd)
                        time.sleep(0.1)
                    update_firebase_state("fanState", False)
                    fanState = False
                for k in FSM["gesture_counter"]: FSM["gesture_counter"][k] = 0
                return jsonify({"gesture": "Four", "command": command, "command_mode": True, "voice_mode": False})
            return jsonify({"gesture": gesture, "command": "", "command_mode": True, "voice_mode": False})
        return jsonify({"gesture": gesture, "command": "", "command_mode": FSM["command_mode"], "voice_mode": FSM["voice_mode"]})
    except Exception as e:
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

# ==== C√°c API Assistant ƒë·∫ßy ƒë·ªß ====
def handle_ask_time():
    try:
        now = datetime.now()
        return f"B√¢y gi·ªù l√† {now.strftime('%H:%M')}."
    except Exception as e:
        return f"L·ªói l·∫•y th·ªùi gian: {e}"

def handle_ask_date():
    now = datetime.now()
    return f"H√¥m nay l√† ng√†y {now.strftime('%d/%m/%Y')}."

def handle_ask_weekday():
    weekdays = ["Th·ª© Hai","Th·ª© Ba","Th·ª© T∆∞","Th·ª© NƒÉm","Th·ª© S√°u","Th·ª© B·∫£y","Ch·ªß Nh·∫≠t"]
    return f"H√¥m nay l√† {weekdays[datetime.now().weekday()]}."

def handle_weather(city="Ho Chi Minh"):
    API_KEY = "49edb9d063ea368d8bbe0514d50bc784"
    res = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&lang=vi&units=metric")
    if not res.ok:
        return "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin th·ªùi ti·∫øt."
    data = res.json()
    desc = data['weather'][0]['description']
    temp = data['main']['temp']
    humidity = data['main']['humidity']
    is_rain = "rain" in data['weather'][0]['main'].lower() or "m∆∞a" in desc.lower()
    reply = f"{city}: {desc}, {temp}¬∞C. "
    reply += "C√≥ m∆∞a. " if is_rain else "Kh√¥ng m∆∞a. "
    reply += f"ƒê·ªô ·∫©m: {humidity}%. "
    advice = []
    if temp > 35:
        advice.append("Tr·ªùi n·∫Øng n√≥ng, b·∫°n n√™n mang theo n∆∞·ªõc v√† che ch·∫Øn c·∫©n th·∫≠n khi ra ngo√†i.")
    elif temp < 20:
        advice.append("Tr·ªùi l·∫°nh, b·∫°n nh·ªõ m·∫∑c ·∫•m khi ra ƒë∆∞·ªùng nh√©!")
    if humidity > 85:
        advice.append("ƒê·ªô ·∫©m cao, b·∫°n n√™n ch√∫ √Ω ph√≤ng tr√°nh c·∫£m l·∫°nh khi ra ngo√†i.")
    if is_rain:
        advice.append("Tr·ªùi c√≥ m∆∞a, b·∫°n nh·ªõ mang theo √°o m∆∞a ho·∫∑c √¥.")
    lat = data['coord']['lat']
    lon = data['coord']['lon']
    try:
        res_uv = requests.get(f"https://api.openweathermap.org/data/2.5/uvi?appid={API_KEY}&lat={lat}&lon={lon}")
        if res_uv.ok:
            uv = res_uv.json()['value']
            if uv < 3:
                advice.append("Ch·ªâ s·ªë UV th·∫•p, an to√†n khi ra ngo√†i.")
            elif uv < 6:
                advice.append("Ch·ªâ s·ªë UV trung b√¨nh, b·∫°n n√™n ch√∫ √Ω che ch·∫Øn khi ra ngo√†i.")
            else:
                advice.append("Ch·ªâ s·ªë UV cao, b·∫°n n√™n b√¥i kem ch·ªëng n·∫Øng v√† ƒë·ªôi m≈© khi ra ngo√†i.")
            reply += f"Ch·ªâ s·ªë UV: {uv}. "
    except Exception:
        pass
    try:
        res_aqi = requests.get(f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={API_KEY}")
        if res_aqi.ok:
            aqi_data = res_aqi.json()['list'][0]
            pm25 = aqi_data['components']['pm2_5']
            pm10 = aqi_data['components']['pm10']
            aqi = aqi_data['main']['aqi']
            aqi_map = {1: "T·ªët", 2: "Kh√°", 3: "Trung b√¨nh", 4: "K√©m", 5: "R·∫•t k√©m"}
            reply += f"PM2.5: {pm25} ¬µg/m¬≥, PM10: {pm10} ¬µg/m¬≥. Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠: {aqi_map.get(aqi, 'Kh√¥ng r√µ')}. "
            if aqi >= 4:
                advice.append("Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ k√©m, b·∫°n n√™n h·∫°n ch·∫ø ra ngo√†i ho·∫∑c ƒëeo kh·∫©u trang ch·ªëng b·ª•i m·ªãn.")
            elif aqi <= 2:
                advice.append("Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ t·ªët, ph√π h·ª£p cho c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi.")
    except Exception:
        pass
    if advice:
        reply += "L·ªùi khuy√™n: " + " ".join(advice)
    return reply

def handle_news():
    rss_url = "https://vnexpress.net/rss/tin-moi-nhat.rss"
    try:
        feed = feedparser.parse(rss_url)
        news_list = []
        for item in feed.entries[:5]:
            title = item.title
            summary = re.sub('<.*?>', '', getattr(item, 'summary', '')).strip()
            news_list.append(f"- {title}: {summary}")
        return "Tin n·ªïi b·∫≠t h√¥m nay:\n" + "\n".join(news_list)
    except Exception as e:
        return f"L·ªói l·∫•y tin t·ª©c: {e}"

def handle_calculation(text):
    text = text.replace("c·ªông", "+").replace("tr·ª´", "-").replace("nh√¢n", "*").replace("chia", "/")
    expr = ''.join([c for c in text if c in "+-*/.0123456789"])
    return f"K·∫øt qu·∫£: {sympify(expr).evalf()}"

def handle_definition(text):
    query = re.search(r"(.+) l√† g√¨", text)
    if query: query = query.group(1).strip()
    else: query = text
    try:
        return wikipedia.summary(query, sentences=2)
    except:
        return "Kh√¥ng t√¨m th·∫•y ƒë·ªãnh nghƒ©a."

def handle_reminder(text):
    with open("reminders.txt", "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()}: {text}\n")
    return "ƒê√£ l∆∞u nh·∫Øc nh·ªü!"

def handle_alarm(text):
    with open("alarms.txt", "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()}: {text}\n")
    return "ƒê√£ ghi nh·∫≠n c·∫£nh b√°o!"

def handle_chitchat(intent, text):
    prompt = f"Intent={intent}\nUser:{text}\nBot:"
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": "Bearer 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",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama3-70b-8192",
        "messages": [
            {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¢n thi·ªán, n√≥i chuy·ªán t·ª± nhi√™n v√† g·∫ßn g≈©i v·ªõi ng∆∞·ªùi Vi·ªát."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.6,
        "max_tokens": 256,
        "stream": False
    }
    try:
        resp = requests.post(url, json=data, headers=headers, timeout=10)
        resp.raise_for_status()
        return resp.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"L·ªói k·∫øt n·ªëi Groq: {e}"

def handle_time_until(text):
    dt = dateparser.parse(text,languages=['vi'])
    if not dt: return "Kh√¥ng x√°c ƒë·ªãnh th·ªùi gian."
    diff = dt - datetime.now()
    if diff.total_seconds()<0: return "Th·ªùi ƒëi·ªÉm ƒë√£ qua."
    d,h,m = diff.days, diff.seconds//3600, (diff.seconds%3600)//60
    parts = []
    if d: parts.append(f"{d} ng√†y")
    if h: parts.append(f"{h} gi·ªù")
    if m: parts.append(f"{m} ph√∫t")
    return f"C√≤n {' '.join(parts)} ƒë·∫øn {dt.strftime('%d/%m/%Y %H:%M')}"

def extract_datetime(text):
    m = re.search(r"\d{1,2}[/-]\d{1,2}[/-]\d{2,4}", text)
    if m: return m.group()
    m = re.search(r"\d{1,2} ?(gi·ªù|h|:)\s*\d*", text)
    if m: return m.group()
    m = re.search(r"th·ª© ?[2-7]|ch·ªß nh·∫≠t", text, re.IGNORECASE)
    if m: return m.group()
    return None

def time_until_event(text, default_lang='vi'):
    now = datetime.now()
    time_text = extract_datetime(text)
    if not time_text:
        return "T√¥i kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c m·ªëc th·ªùi gian trong c√¢u h·ªèi c·ªßa b·∫°n."
    m = re.search(r"(\d{1,2})(?: ?(gi·ªù|h|:)\s*(\d{1,2})?)", time_text)
    if m and not re.search(r"\d{1,2}[/-]\d{1,2}[/-]\d{2,4}", time_text):
        hour = int(m.group(1))
        minute = int(m.group(3) or 0)
        target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if target_time <= now:
            target_time += timedelta(days=1)
    else:
        target_time = dateparser.parse(time_text, settings={'RELATIVE_BASE': now, 'PREFER_DATES_FROM': 'future'}, languages=[default_lang])
    if not target_time:
        return "T√¥i kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c m·ªëc th·ªùi gian trong c√¢u h·ªèi c·ªßa b·∫°n."
    delta = target_time - now
    days, remainder = divmod(delta.total_seconds(), 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)
    parts = []
    if days > 0: parts.append(f"{int(days)} ng√†y")
    if hours > 0: parts.append(f"{int(hours)} gi·ªù")
    if minutes > 0: parts.append(f"{int(minutes)} ph√∫t")
    if not parts: parts.append("√≠t h∆°n 1 ph√∫t")
    return f"C√≤n {' '.join(parts)} n·ªØa ƒë·∫øn {target_time.strftime('%H:%M, ng√†y %d/%m/%Y')}."

# C√°c API Assistant
@app.route('/time',     methods=['POST'])
def post_time():      return jsonify({"time": handle_ask_time()})
@app.route('/date',     methods=['POST'])
def post_date():      return jsonify({"date": handle_ask_date()})
@app.route('/weekday',  methods=['POST'])
def post_weekday():   return jsonify({"weekday": handle_ask_weekday()})
@app.route('/weather',  methods=['POST'])
def post_weather():
    city = request.json.get('city','Ho Chi Minh')
    return jsonify({"weather": handle_weather(city)})
@app.route('/news',     methods=['POST'])
def post_news():      return jsonify({"news": handle_news()})
@app.route('/calculate',methods=['POST'])
def post_calculate():
    expr = request.json.get('expr','')
    return jsonify({"result": handle_calculation(expr)})
@app.route('/define',   methods=['POST'])
def post_define():
    term = request.json.get('term','')
    return jsonify({"definition": handle_definition(term)})
@app.route('/reminder', methods=['POST'])
def post_reminder():
    text = request.json.get('text','')
    return jsonify({"reminder": handle_reminder(text)})
@app.route('/alarm',    methods=['POST'])
def post_alarm():
    text = request.json.get('text','')
    return jsonify({"alarm": handle_alarm(text)})

# COMMAND NLP + MQTT + FIREBASE SYNC
command_map = {
    "m·ªü c·ª≠a":               "Mo_cua",
    "ƒë√≥ng c·ª≠a":             "Dong_cua",
    "b·∫≠t ƒë√®n ph√≤ng kh√°ch":  "Bat_den_pk",
    "t·∫Øt ƒë√®n ph√≤ng kh√°ch":  "Tat_den_pk",
    "b·∫≠t ƒë√®n nh√† b·∫øp":      "Bat_den_nb",
    "t·∫Øt ƒë√®n nh√† b·∫øp":      "Tat_den_nb",
    "b·∫≠t ƒë√®n":              "Bat_den_all",
    "t·∫Øt ƒë√®n":              "Tat_den_all",
    "b·∫≠t qu·∫°t":             "Bat_quat",
    "t·∫Øt qu·∫°t":             "Tat_quat",
    "open door":            "Mo_cua",
    "close door":           "Dong_cua",
    "turn on living room light":   "Bat_den_pk",
    "turn off living room light":  "Tat_den_pk",
    "turn on kitchen light":       "Bat_den_nb",
    "turn off kitchen light":      "Tat_den_nb",
    "turn on lights":              "Bat_den_all",
    "turn off lights":             "Tat_den_all",
    "turn on ac":                  "Bat_quat",
    "turn off ac":                 "Tat_quat",
    "turn on fan":                 "Bat_quat",
    "turn off fan":                "Tat_quat",
}
def mqtt_command(text: str):
    text_lower = text.lower()
    for k,v in command_map.items():
        if k in text_lower:
            return v
    return None

state_map = {
    "Mo_cua":      {"doorState": True},
    "Dong_cua":    {"doorState": False},
    "Bat_den_pk":  {"light1State": True},
    "Tat_den_pk":  {"light1State": False},
    "Bat_den_nb":  {"light2State": True},
    "Tat_den_nb":  {"light2State": False},
    "Bat_den_all": {"light1State": True,  "light2State": True},
    "Tat_den_all": {"light1State": False, "light2State": False},
    "Bat_quat":    {"fanState": True},
    "Tat_quat":    {"fanState": False},
}

@app.route('/predict-intent', methods=['POST'])
def post_intent():
    text = request.json.get('text','').lower()
    logging.info(f"[CLIENT G·ª¨I L√äN]: {text}")
    mcmd = mqtt_command(text)
    if mcmd:
        client, topic = get_mqtt_client_for_command(mcmd)
        for i in range(2):
            client.publish(topic, mcmd)
            time.sleep(0.1)
        logging.info(f"Published ‚Üí {topic} ({client._client_id.decode()}): {mcmd}")
        if mcmd in state_map:
            for key,val in state_map[mcmd].items():
                update_firebase_state(key, val)
                globals()[key] = val
        return jsonify({"intent":"control","reply":f"ƒê√£ g·ª≠i l·ªánh {mcmd}."})
    intent = clf.predict(vectorizer.transform([text]))[0]
    logging.info(f"[SERVER ƒêO√ÅN INTENT]: {intent}")
    handlers = {
        'ask_time':         handle_ask_time,
        'ask_date':         handle_ask_date,
        'ask_weekday':      handle_ask_weekday,
        'ask_weather':      lambda: handle_weather("Ho Chi Minh"),
        'ask_news':         handle_news,
        'ask_calculation':  lambda: handle_calculation(text),
        'ask_definition':   lambda: handle_definition(text),
        'ask_reminder':     lambda: handle_reminder(text),
        'alarm_notification':lambda: handle_alarm(text),
        'chitchat':         lambda: handle_chitchat(intent,text),
        'time_until_event': lambda: handle_time_until(text),
        'ask_days_until':   lambda: handle_time_until(text),
    }
    if intent in handlers:
        return jsonify({"intent": intent,"reply": handlers[intent]()})
    return jsonify({"intent":"unknown","reply":"Xin l·ªói, t√¥i ch∆∞a hi·ªÉu."})

@app.route('/states', methods=['GET'])
def get_states():
    return jsonify({
        "light1State": light1State,
        "light2State": light2State,
        "doorState":   doorState,
        "fanState":    fanState
    })

if __name__ == '__main__':
    try:
        logging.info("ƒêang build DeepFace database representations, vui l√≤ng ƒë·ª£i... (L·∫ßn ƒë·∫ßu s·∫Ω h∆°i l√¢u)")
        first_person_dir = None
        for name in os.listdir(DB_PATH):
            if os.path.isdir(os.path.join(DB_PATH, name)):
                first_person_dir = os.path.join(DB_PATH, name)
                break
        if not first_person_dir:
            logging.error(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ·∫£nh ng∆∞·ªùi d√πng trong {DB_PATH}")
            exit(1)
        first_img = None
        for fname in os.listdir(first_person_dir):
            if fname.lower().endswith(('.jpg', '.jpeg', '.png')):
                first_img = os.path.join(first_person_dir, fname)
                break
        if not first_img:
            logging.error(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh trong {first_person_dir}")
            exit(1)
        _ = DeepFace.find(
            img_path=first_img,
            db_path=DB_PATH,
            model_name=MODEL_NAME,
            enforce_detection=False
        )
        logging.info("Build DeepFace DB th√†nh c√¥ng! (S·∫µn s√†ng nh·∫≠n di·ªán)")
    except Exception as e:
        logging.error(f"L·ªói build DeepFace DB: {e}")
        exit(1)

    try:
        logging.info("ƒêang load NLP model...")
        _ = clf, vectorizer
        logging.info("Load NLP model th√†nh c√¥ng!")
    except Exception as e:
        logging.error(f"L·ªói load NLP model/vectorizer: {e}")
        exit(1)
    logging.info("Server starting on 0.0.0.0:5000 ‚Ä¶")
    app.run(host='0.0.0.0', port=5000)
